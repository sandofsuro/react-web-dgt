'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Module = require('./Module');
var getAssetDataFromName = require('./utils/getAssetDataFromName');

var AssetModule = (function (_Module) {
  _inherits(AssetModule, _Module);

  function AssetModule() {
    _classCallCheck(this, AssetModule);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _get(Object.getPrototypeOf(AssetModule.prototype), 'constructor', this).apply(this, args);

    var _getAssetDataFromName = getAssetDataFromName(this.path);

    var resolution = _getAssetDataFromName.resolution;
    var name = _getAssetDataFromName.name;
    var type = _getAssetDataFromName.type;

    this.resolution = resolution;
    this._name = name;
    this._type = type;
  }

  _createClass(AssetModule, [{
    key: 'isHaste',
    value: function isHaste() {
      return Promise.resolve(false);
    }
  }, {
    key: 'getDependencies',
    value: function getDependencies() {
      return Promise.resolve([]);
    }
  }, {
    key: 'read',
    value: function read() {
      return Promise.resolve({});
    }
  }, {
    key: 'getName',
    value: function getName() {
      var _this = this;

      return _get(Object.getPrototypeOf(AssetModule.prototype), 'getName', this).call(this).then(function (id) {
        return id.replace(/\/[^\/]+$/, '/' + _this._name + '.' + _this._type);
      });
    }
  }, {
    key: 'hash',
    value: function hash() {
      return 'AssetModule : ' + this.path;
    }
  }, {
    key: 'isJSON',
    value: function isJSON() {
      return false;
    }
  }, {
    key: 'isAsset',
    value: function isAsset() {
      return true;
    }
  }]);

  return AssetModule;
})(Module);

module.exports = AssetModule;